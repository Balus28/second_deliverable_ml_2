import os
os.system('pip install streamlit pandas lightgbm scikit-learn joblib')

import streamlit as st
import pandas as pd
import pickle
import lightgbm
import numpy as np
from sklearn.preprocessing import RobustScaler

# ===============================================================
# CONFIGURACI√ìN DE LA APP
# ===============================================================
st.set_page_config(page_title="Predicci√≥n Autom√°tica", page_icon="ü§ñ", layout="wide")

st.markdown(
    """
    <h1 style="background-color:#004aad; color:white; padding:10px; text-align:center; border-radius:10px;">
        Sistema de Predicci√≥n Autom√°tica
    </h1>
    """,
    unsafe_allow_html=True
)

st.info("Introduce los valores de entrada y obt√©n una predicci√≥n autom√°tica con los modelos entrenados (clasificaci√≥n y regresi√≥n).")
st.caption("üí° Si deseas realizar otra predicci√≥n, simplemente cambia los valores y presiona nuevamente el bot√≥n correspondiente.")

# ===============================================================
# CARGA DE MODELOS Y SCALER
# ===============================================================

@st.cache_resource
def load_classification_model():
    with open("modelo_clasificacion.pkl", "rb") as f:
        model = pickle.load(f)
    return model

@st.cache_resource
def load_regression_model():
    with open("modelo_regresion.pkl", "rb") as f:
        model = pickle.load(f)
    return model

@st.cache_resource
def load_scaler_y():
    """Carga el scaler que se us√≥ para escalar la variable objetivo (y)."""
    try:
        with open("scaler_y.pkl", "rb") as f:
            scaler = pickle.load(f)
        st.success("‚úÖ Scaler de salida cargado correctamente.")
        return scaler
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se encontr√≥ scaler_y.pkl o no se pudo cargar: {e}")
        return None

try:
    clas_model = load_classification_model()
    reg_model = load_regression_model()
    scaler_y = load_scaler_y()
    st.success("‚úÖ Modelos cargados correctamente.")
except Exception as e:
        st.error(f"‚ùå Error al realizar la predicci√≥n de regresi√≥n: {e}")

